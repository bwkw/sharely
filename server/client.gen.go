// Package calendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package calendar

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostGroups request with any body
	PostGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroups(ctx context.Context, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsGroupIdInvitation request with any body
	PostGroupsGroupIdInvitationWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsGroupIdInvitation(ctx context.Context, groupId int, body PostGroupsGroupIdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupsGroupIdSchedules request
	GetGroupsGroupIdSchedules(ctx context.Context, groupId int, params *GetGroupsGroupIdSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupsGroupIdSchedules request with any body
	PostGroupsGroupIdSchedulesWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupsGroupIdSchedules(ctx context.Context, groupId int, body PostGroupsGroupIdSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupsGroupIdSchedulesScheduleId request
	DeleteGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupsGroupIdSchedulesScheduleId request
	GetGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupsGroupIdSchedulesScheduleId request with any body
	PutGroupsGroupIdSchedulesScheduleIdWithBody(ctx context.Context, groupId int, scheduleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, body PutGroupsGroupIdSchedulesScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvitationsInvitationCode request
	GetInvitationsInvitationCode(ctx context.Context, invitationCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvitationsInvitationCodeAccept request with any body
	PostInvitationsInvitationCodeAcceptWithBody(ctx context.Context, invitationCode string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvitationsInvitationCodeAccept(ctx context.Context, invitationCode string, body PostInvitationsInvitationCodeAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsers request with any body
	PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserId request
	DeleteUsersUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersUserId request with any body
	PutUsersUserIdWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersUserId(ctx context.Context, userId int, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroups(ctx context.Context, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsGroupIdInvitationWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsGroupIdInvitationRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsGroupIdInvitation(ctx context.Context, groupId int, body PostGroupsGroupIdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsGroupIdInvitationRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupsGroupIdSchedules(ctx context.Context, groupId int, params *GetGroupsGroupIdSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsGroupIdSchedulesRequest(c.Server, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsGroupIdSchedulesWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsGroupIdSchedulesRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupsGroupIdSchedules(ctx context.Context, groupId int, body PostGroupsGroupIdSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupsGroupIdSchedulesRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupsGroupIdSchedulesScheduleIdRequest(c.Server, groupId, scheduleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsGroupIdSchedulesScheduleIdRequest(c.Server, groupId, scheduleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupsGroupIdSchedulesScheduleIdWithBody(ctx context.Context, groupId int, scheduleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupsGroupIdSchedulesScheduleIdRequestWithBody(c.Server, groupId, scheduleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupsGroupIdSchedulesScheduleId(ctx context.Context, groupId int, scheduleId int, body PutGroupsGroupIdSchedulesScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupsGroupIdSchedulesScheduleIdRequest(c.Server, groupId, scheduleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvitationsInvitationCode(ctx context.Context, invitationCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvitationsInvitationCodeRequest(c.Server, invitationCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitationsInvitationCodeAcceptWithBody(ctx context.Context, invitationCode string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitationsInvitationCodeAcceptRequestWithBody(c.Server, invitationCode, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvitationsInvitationCodeAccept(ctx context.Context, invitationCode string, body PostInvitationsInvitationCodeAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvitationsInvitationCodeAcceptRequest(c.Server, invitationCode, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUserIdWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersUserId(ctx context.Context, userId int, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostGroupsRequest calls the generic PostGroups builder with application/json body
func NewPostGroupsRequest(server string, body PostGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupsRequestWithBody generates requests for PostGroups with any type of body
func NewPostGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupsGroupIdInvitationRequest calls the generic PostGroupsGroupIdInvitation builder with application/json body
func NewPostGroupsGroupIdInvitationRequest(server string, groupId int, body PostGroupsGroupIdInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsGroupIdInvitationRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPostGroupsGroupIdInvitationRequestWithBody generates requests for PostGroupsGroupIdInvitation with any type of body
func NewPostGroupsGroupIdInvitationRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/invitation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupsGroupIdSchedulesRequest generates requests for GetGroupsGroupIdSchedules
func NewGetGroupsGroupIdSchedulesRequest(server string, groupId int, params *GetGroupsGroupIdSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Keyword != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, *params.Keyword); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupsGroupIdSchedulesRequest calls the generic PostGroupsGroupIdSchedules builder with application/json body
func NewPostGroupsGroupIdSchedulesRequest(server string, groupId int, body PostGroupsGroupIdSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupsGroupIdSchedulesRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPostGroupsGroupIdSchedulesRequestWithBody generates requests for PostGroupsGroupIdSchedules with any type of body
func NewPostGroupsGroupIdSchedulesRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupsGroupIdSchedulesScheduleIdRequest generates requests for DeleteGroupsGroupIdSchedulesScheduleId
func NewDeleteGroupsGroupIdSchedulesScheduleIdRequest(server string, groupId int, scheduleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/schedules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupsGroupIdSchedulesScheduleIdRequest generates requests for GetGroupsGroupIdSchedulesScheduleId
func NewGetGroupsGroupIdSchedulesScheduleIdRequest(server string, groupId int, scheduleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/schedules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupsGroupIdSchedulesScheduleIdRequest calls the generic PutGroupsGroupIdSchedulesScheduleId builder with application/json body
func NewPutGroupsGroupIdSchedulesScheduleIdRequest(server string, groupId int, scheduleId int, body PutGroupsGroupIdSchedulesScheduleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupsGroupIdSchedulesScheduleIdRequestWithBody(server, groupId, scheduleId, "application/json", bodyReader)
}

// NewPutGroupsGroupIdSchedulesScheduleIdRequestWithBody generates requests for PutGroupsGroupIdSchedulesScheduleId with any type of body
func NewPutGroupsGroupIdSchedulesScheduleIdRequestWithBody(server string, groupId int, scheduleId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, scheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/groups/%s/schedules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvitationsInvitationCodeRequest generates requests for GetInvitationsInvitationCode
func NewGetInvitationsInvitationCodeRequest(server string, invitationCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_code", runtime.ParamLocationPath, invitationCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvitationsInvitationCodeAcceptRequest calls the generic PostInvitationsInvitationCodeAccept builder with application/json body
func NewPostInvitationsInvitationCodeAcceptRequest(server string, invitationCode string, body PostInvitationsInvitationCodeAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvitationsInvitationCodeAcceptRequestWithBody(server, invitationCode, "application/json", bodyReader)
}

// NewPostInvitationsInvitationCodeAcceptRequestWithBody generates requests for PostInvitationsInvitationCodeAccept with any type of body
func NewPostInvitationsInvitationCodeAcceptRequestWithBody(server string, invitationCode string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_code", runtime.ParamLocationPath, invitationCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invitations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersUserIdRequest generates requests for DeleteUsersUserId
func NewDeleteUsersUserIdRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUsersUserIdRequest calls the generic PutUsersUserId builder with application/json body
func NewPutUsersUserIdRequest(server string, userId int, body PutUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPutUsersUserIdRequestWithBody generates requests for PutUsersUserId with any type of body
func NewPutUsersUserIdRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostGroups request with any body
	PostGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error)

	PostGroupsWithResponse(ctx context.Context, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error)

	// PostGroupsGroupIdInvitation request with any body
	PostGroupsGroupIdInvitationWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdInvitationResponse, error)

	PostGroupsGroupIdInvitationWithResponse(ctx context.Context, groupId int, body PostGroupsGroupIdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdInvitationResponse, error)

	// GetGroupsGroupIdSchedules request
	GetGroupsGroupIdSchedulesWithResponse(ctx context.Context, groupId int, params *GetGroupsGroupIdSchedulesParams, reqEditors ...RequestEditorFn) (*GetGroupsGroupIdSchedulesResponse, error)

	// PostGroupsGroupIdSchedules request with any body
	PostGroupsGroupIdSchedulesWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdSchedulesResponse, error)

	PostGroupsGroupIdSchedulesWithResponse(ctx context.Context, groupId int, body PostGroupsGroupIdSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdSchedulesResponse, error)

	// DeleteGroupsGroupIdSchedulesScheduleId request
	DeleteGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*DeleteGroupsGroupIdSchedulesScheduleIdResponse, error)

	// GetGroupsGroupIdSchedulesScheduleId request
	GetGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*GetGroupsGroupIdSchedulesScheduleIdResponse, error)

	// PutGroupsGroupIdSchedulesScheduleId request with any body
	PutGroupsGroupIdSchedulesScheduleIdWithBodyWithResponse(ctx context.Context, groupId int, scheduleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupsGroupIdSchedulesScheduleIdResponse, error)

	PutGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, body PutGroupsGroupIdSchedulesScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupsGroupIdSchedulesScheduleIdResponse, error)

	// GetInvitationsInvitationCode request
	GetInvitationsInvitationCodeWithResponse(ctx context.Context, invitationCode string, reqEditors ...RequestEditorFn) (*GetInvitationsInvitationCodeResponse, error)

	// PostInvitationsInvitationCodeAccept request with any body
	PostInvitationsInvitationCodeAcceptWithBodyWithResponse(ctx context.Context, invitationCode string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitationsInvitationCodeAcceptResponse, error)

	PostInvitationsInvitationCodeAcceptWithResponse(ctx context.Context, invitationCode string, body PostInvitationsInvitationCodeAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitationsInvitationCodeAcceptResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsers request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// DeleteUsersUserId request
	DeleteUsersUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error)

	// PutUsersUserId request with any body
	PutUsersUserIdWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error)

	PutUsersUserIdWithResponse(ctx context.Context, userId int, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error)
}

type PostGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsGroupIdInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupsGroupIdInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsGroupIdInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsGroupIdSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Schedule
}

// Status returns HTTPResponse.Status
func (r GetGroupsGroupIdSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsGroupIdSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupsGroupIdSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostGroupsGroupIdSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupsGroupIdSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupsGroupIdSchedulesScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupsGroupIdSchedulesScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupsGroupIdSchedulesScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsGroupIdSchedulesScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
}

// Status returns HTTPResponse.Status
func (r GetGroupsGroupIdSchedulesScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsGroupIdSchedulesScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupsGroupIdSchedulesScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutGroupsGroupIdSchedulesScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupsGroupIdSchedulesScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvitationsInvitationCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invitation
}

// Status returns HTTPResponse.Status
func (r GetInvitationsInvitationCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvitationsInvitationCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvitationsInvitationCodeAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInvitationsInvitationCodeAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvitationsInvitationCodeAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostGroupsWithBodyWithResponse request with arbitrary body returning *PostGroupsResponse
func (c *ClientWithResponses) PostGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error) {
	rsp, err := c.PostGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsWithResponse(ctx context.Context, body PostGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsResponse, error) {
	rsp, err := c.PostGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsResponse(rsp)
}

// PostGroupsGroupIdInvitationWithBodyWithResponse request with arbitrary body returning *PostGroupsGroupIdInvitationResponse
func (c *ClientWithResponses) PostGroupsGroupIdInvitationWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdInvitationResponse, error) {
	rsp, err := c.PostGroupsGroupIdInvitationWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsGroupIdInvitationResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsGroupIdInvitationWithResponse(ctx context.Context, groupId int, body PostGroupsGroupIdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdInvitationResponse, error) {
	rsp, err := c.PostGroupsGroupIdInvitation(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsGroupIdInvitationResponse(rsp)
}

// GetGroupsGroupIdSchedulesWithResponse request returning *GetGroupsGroupIdSchedulesResponse
func (c *ClientWithResponses) GetGroupsGroupIdSchedulesWithResponse(ctx context.Context, groupId int, params *GetGroupsGroupIdSchedulesParams, reqEditors ...RequestEditorFn) (*GetGroupsGroupIdSchedulesResponse, error) {
	rsp, err := c.GetGroupsGroupIdSchedules(ctx, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsGroupIdSchedulesResponse(rsp)
}

// PostGroupsGroupIdSchedulesWithBodyWithResponse request with arbitrary body returning *PostGroupsGroupIdSchedulesResponse
func (c *ClientWithResponses) PostGroupsGroupIdSchedulesWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdSchedulesResponse, error) {
	rsp, err := c.PostGroupsGroupIdSchedulesWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsGroupIdSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PostGroupsGroupIdSchedulesWithResponse(ctx context.Context, groupId int, body PostGroupsGroupIdSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupsGroupIdSchedulesResponse, error) {
	rsp, err := c.PostGroupsGroupIdSchedules(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupsGroupIdSchedulesResponse(rsp)
}

// DeleteGroupsGroupIdSchedulesScheduleIdWithResponse request returning *DeleteGroupsGroupIdSchedulesScheduleIdResponse
func (c *ClientWithResponses) DeleteGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*DeleteGroupsGroupIdSchedulesScheduleIdResponse, error) {
	rsp, err := c.DeleteGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupsGroupIdSchedulesScheduleIdResponse(rsp)
}

// GetGroupsGroupIdSchedulesScheduleIdWithResponse request returning *GetGroupsGroupIdSchedulesScheduleIdResponse
func (c *ClientWithResponses) GetGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, reqEditors ...RequestEditorFn) (*GetGroupsGroupIdSchedulesScheduleIdResponse, error) {
	rsp, err := c.GetGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsGroupIdSchedulesScheduleIdResponse(rsp)
}

// PutGroupsGroupIdSchedulesScheduleIdWithBodyWithResponse request with arbitrary body returning *PutGroupsGroupIdSchedulesScheduleIdResponse
func (c *ClientWithResponses) PutGroupsGroupIdSchedulesScheduleIdWithBodyWithResponse(ctx context.Context, groupId int, scheduleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupsGroupIdSchedulesScheduleIdResponse, error) {
	rsp, err := c.PutGroupsGroupIdSchedulesScheduleIdWithBody(ctx, groupId, scheduleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupsGroupIdSchedulesScheduleIdResponse(rsp)
}

func (c *ClientWithResponses) PutGroupsGroupIdSchedulesScheduleIdWithResponse(ctx context.Context, groupId int, scheduleId int, body PutGroupsGroupIdSchedulesScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupsGroupIdSchedulesScheduleIdResponse, error) {
	rsp, err := c.PutGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupsGroupIdSchedulesScheduleIdResponse(rsp)
}

// GetInvitationsInvitationCodeWithResponse request returning *GetInvitationsInvitationCodeResponse
func (c *ClientWithResponses) GetInvitationsInvitationCodeWithResponse(ctx context.Context, invitationCode string, reqEditors ...RequestEditorFn) (*GetInvitationsInvitationCodeResponse, error) {
	rsp, err := c.GetInvitationsInvitationCode(ctx, invitationCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvitationsInvitationCodeResponse(rsp)
}

// PostInvitationsInvitationCodeAcceptWithBodyWithResponse request with arbitrary body returning *PostInvitationsInvitationCodeAcceptResponse
func (c *ClientWithResponses) PostInvitationsInvitationCodeAcceptWithBodyWithResponse(ctx context.Context, invitationCode string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvitationsInvitationCodeAcceptResponse, error) {
	rsp, err := c.PostInvitationsInvitationCodeAcceptWithBody(ctx, invitationCode, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitationsInvitationCodeAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostInvitationsInvitationCodeAcceptWithResponse(ctx context.Context, invitationCode string, body PostInvitationsInvitationCodeAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvitationsInvitationCodeAcceptResponse, error) {
	rsp, err := c.PostInvitationsInvitationCodeAccept(ctx, invitationCode, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvitationsInvitationCodeAcceptResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// DeleteUsersUserIdWithResponse request returning *DeleteUsersUserIdResponse
func (c *ClientWithResponses) DeleteUsersUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error) {
	rsp, err := c.DeleteUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserIdResponse(rsp)
}

// PutUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutUsersUserIdResponse
func (c *ClientWithResponses) PutUsersUserIdWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error) {
	rsp, err := c.PutUsersUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersUserIdWithResponse(ctx context.Context, userId int, body PutUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersUserIdResponse, error) {
	rsp, err := c.PutUsersUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersUserIdResponse(rsp)
}

// ParsePostGroupsResponse parses an HTTP response from a PostGroupsWithResponse call
func ParsePostGroupsResponse(rsp *http.Response) (*PostGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostGroupsGroupIdInvitationResponse parses an HTTP response from a PostGroupsGroupIdInvitationWithResponse call
func ParsePostGroupsGroupIdInvitationResponse(rsp *http.Response) (*PostGroupsGroupIdInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsGroupIdInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupsGroupIdSchedulesResponse parses an HTTP response from a GetGroupsGroupIdSchedulesWithResponse call
func ParseGetGroupsGroupIdSchedulesResponse(rsp *http.Response) (*GetGroupsGroupIdSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsGroupIdSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGroupsGroupIdSchedulesResponse parses an HTTP response from a PostGroupsGroupIdSchedulesWithResponse call
func ParsePostGroupsGroupIdSchedulesResponse(rsp *http.Response) (*PostGroupsGroupIdSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupsGroupIdSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteGroupsGroupIdSchedulesScheduleIdResponse parses an HTTP response from a DeleteGroupsGroupIdSchedulesScheduleIdWithResponse call
func ParseDeleteGroupsGroupIdSchedulesScheduleIdResponse(rsp *http.Response) (*DeleteGroupsGroupIdSchedulesScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupsGroupIdSchedulesScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupsGroupIdSchedulesScheduleIdResponse parses an HTTP response from a GetGroupsGroupIdSchedulesScheduleIdWithResponse call
func ParseGetGroupsGroupIdSchedulesScheduleIdResponse(rsp *http.Response) (*GetGroupsGroupIdSchedulesScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsGroupIdSchedulesScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutGroupsGroupIdSchedulesScheduleIdResponse parses an HTTP response from a PutGroupsGroupIdSchedulesScheduleIdWithResponse call
func ParsePutGroupsGroupIdSchedulesScheduleIdResponse(rsp *http.Response) (*PutGroupsGroupIdSchedulesScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupsGroupIdSchedulesScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInvitationsInvitationCodeResponse parses an HTTP response from a GetInvitationsInvitationCodeWithResponse call
func ParseGetInvitationsInvitationCodeResponse(rsp *http.Response) (*GetInvitationsInvitationCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvitationsInvitationCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvitationsInvitationCodeAcceptResponse parses an HTTP response from a PostInvitationsInvitationCodeAcceptWithResponse call
func ParsePostInvitationsInvitationCodeAcceptResponse(rsp *http.Response) (*PostInvitationsInvitationCodeAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvitationsInvitationCodeAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUsersUserIdResponse parses an HTTP response from a DeleteUsersUserIdWithResponse call
func ParseDeleteUsersUserIdResponse(rsp *http.Response) (*DeleteUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutUsersUserIdResponse parses an HTTP response from a PutUsersUserIdWithResponse call
func ParsePutUsersUserIdResponse(rsp *http.Response) (*PutUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
