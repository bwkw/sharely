// Package calendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package calendar

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W7bNhR+FYLbxQZokbNlQKG7ri0C3xQF0lwVQcGIxzY7iWRJyqlh6Al2vQED9gTD",
	"nmAPtGJvMZCUZMmmLbmRjaHoTaxQ5Dnk+b7zR61xKnIpOHCjcbLGOl1ATtzjtRKFtA9SCQnKMHDDjNq/",
	"FHSqmDRMcJzgW87eF4AYBW7YjIFCM6HQ3AmIsFlJwAlm3MAcFC4jzEkOu1JekhyQmCGzgO212ijG57gs",
	"mxFx/w5SY4VN+ZIZ4mVsb3Zen6Gr6XWtAdmdoIcFSxeIacSsKKC7eiOsIAW2BBUWVmhQ6GEhUDWNukOw",
	"zc4CEjVw2itPAze9skJWuUkXQIsMdm2SikwE1D6zw+ibiYNOAY3QpXu8zwr4FkcYeJHj5M0kurwLQdoR",
	"ti37ORjCMqCoNVwjreuNBkwEnL6lxIBhIb684BTZt4hwiuyUgMiZUDkxOMF24ndOTkBPQ5OvFcxwgr+K",
	"N14RVy4Re38ooyM8IHy+ltW0IcocOOKNfT/SIQ0zWUDFazs8BAzLyT4b3do5QT7eVqu7XIScsCyArB2u",
	"9+T0nhG0rr4WWCwn84ABp3a4b7P9EW/fSkm0fhAqsP1X1ZuGavtEaPiwu/rahZ+29tr5c5JB7f0zsP/1",
	"+v8u4naI8ZnYVfz01bRSw8mc8bnTrSMfkLXjeU1DfYEb3uKUZMApsSdcgtJe2OXF5GJizygkcCIZTvAP",
	"bsgaziwcyWIv2bFPaGN/LQddMJ1Sa0ihzbWfYwP9+wK0+UnQlY+W3AB3i4iUGUvdsvid9nHO82yX2DXe",
	"vZG6LL1KpoDixKgC3ICWgmsv6vvJZQA9l71SBcQARbpIU9B6VmTZyhrjajIJ8JQvScYoYlwWLqYQO/XH",
	"8FQDipMM3YBagkIvlBIeZV3kOVErmy+cbkQQh4cqXdsJlbHjtfud0jJm3fzcg8C1XzZtpztJFMnBgNI4",
	"ebPGzG7Rootrv8KVMrxty6gF0A5n78YCu4lio6Adhq6yhi8IHoH31eQqEAit93Nh0EwUnD6KFjfAKSK8",
	"Va8gIxDxAeZ+hbytwkxp3N6VbhDgyTV0aXLTrDgZS6JK1PsC1Goj62dYuagcWNvAfxfGdjDLmIFc92W4",
	"ptDbsI0oRVaebFvlhOfNXh68FJvQ67mAHphZuAwhlVgyChTVJ38cS4hKFx1lCpGqJr9ftXUMDBhnYMJo",
	"8eIsFXhvMT2satytUI+sNk+VAWvAx0iCQWfwKXacqNhJljXr26Tvi4jxun6c0tLvIQMDu47x3I2HXeOm",
	"EXH6cNkVpduaj3W5vuzYMMHbJMSEqwOrhEJjQu0BQGQPzNGRie2zwWxwrByW7I5PbqcC/BqMRVtCymYs",
	"3Qu7LEJprPi8YB8jO9q0MjzP9GW9cfPQoehTSHqSPHQq3t5Kf690IB9tingdrzf/vE0FhfJQkb5pWPTm",
	"8ZmgMIjNW5qG8HC0mvtQ9Gk1pYH402rSUsFnTOVA94LamjxSheFVdluvASjGJE1BmsOt+V44n/rFZwF1",
	"jNjSvkw7Q7PubVvT4HFhIMyYDgc8GiEKuCu2Qw576yaEcdzqfOtPM2csCQY1wv7u+fFN8Ni1gbO9bWo3",
	"pcBeR6thGPle6hNu179cdh952f0JLay7dvvf3OEW9bcbHy3itf0Z1G061t662YNSQVFPHbsTdAY9qgsc",
	"8eazafyKKhDtq/jPZq4vMeQziyH7KH+q1mNE72i6jSrMOCvb2Z72XYH//PHXx1//xBEuVIYTvDBG6iSO",
	"4QPJZQYXqchjIlmMbQvbXfnvb798/P3vzsokjtcLoU2ZrKVQpvRLI7wkipH76mvDokrJFGakyGzXmYmU",
	"ZG7YZWy19frJ5MnEHuOu/C8AAP//S+lBkkMjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
