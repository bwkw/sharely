// Package calendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package calendar

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new group
	// (POST /groups)
	PostGroups(ctx echo.Context) error
	// Send an invitation to a user by email
	// (POST /groups/{groupId}/invitation)
	PostGroupsGroupIdInvitation(ctx echo.Context, groupId int) error
	// Search schedules for a group by keyword
	// (GET /groups/{groupId}/schedules)
	GetGroupsGroupIdSchedules(ctx echo.Context, groupId int, params GetGroupsGroupIdSchedulesParams) error
	// Create a new schedule for a group
	// (POST /groups/{groupId}/schedules)
	PostGroupsGroupIdSchedules(ctx echo.Context, groupId int) error
	// Delete a schedule for a group
	// (DELETE /groups/{groupId}/schedules/{scheduleId})
	DeleteGroupsGroupIdSchedulesScheduleId(ctx echo.Context, groupId int, scheduleId int) error
	// Get a specific schedule for a group
	// (GET /groups/{groupId}/schedules/{scheduleId})
	GetGroupsGroupIdSchedulesScheduleId(ctx echo.Context, groupId int, scheduleId int) error
	// Update a schedule for a group
	// (PUT /groups/{groupId}/schedules/{scheduleId})
	PutGroupsGroupIdSchedulesScheduleId(ctx echo.Context, groupId int, scheduleId int) error
	// Confirm an invitation
	// (GET /invitations/{invitation_code})
	GetInvitationsInvitationCode(ctx echo.Context, invitationCode string) error
	// Accept an invitation
	// (POST /invitations/{invitation_code}/accept)
	PostInvitationsInvitationCodeAccept(ctx echo.Context, invitationCode string) error
	// Get users by group
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{userId})
	DeleteUsersUserId(ctx echo.Context, userId int) error
	// Update a user
	// (PUT /users/{userId})
	PutUsersUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGroups converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroups(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroups(ctx)
	return err
}

// PostGroupsGroupIdInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroupsGroupIdInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroupsGroupIdInvitation(ctx, groupId)
	return err
}

// GetGroupsGroupIdSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupsGroupIdSchedules(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsGroupIdSchedulesParams
	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupsGroupIdSchedules(ctx, groupId, params)
	return err
}

// PostGroupsGroupIdSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroupsGroupIdSchedules(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroupsGroupIdSchedules(ctx, groupId)
	return err
}

// DeleteGroupsGroupIdSchedulesScheduleId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroupsGroupIdSchedulesScheduleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, ctx.Param("scheduleId"), &scheduleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId)
	return err
}

// GetGroupsGroupIdSchedulesScheduleId converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupsGroupIdSchedulesScheduleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, ctx.Param("scheduleId"), &scheduleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId)
	return err
}

// PutGroupsGroupIdSchedulesScheduleId converts echo context to params.
func (w *ServerInterfaceWrapper) PutGroupsGroupIdSchedulesScheduleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "scheduleId", runtime.ParamLocationPath, ctx.Param("scheduleId"), &scheduleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutGroupsGroupIdSchedulesScheduleId(ctx, groupId, scheduleId)
	return err
}

// GetInvitationsInvitationCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvitationsInvitationCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitation_code" -------------
	var invitationCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "invitation_code", runtime.ParamLocationPath, ctx.Param("invitation_code"), &invitationCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvitationsInvitationCode(ctx, invitationCode)
	return err
}

// PostInvitationsInvitationCodeAccept converts echo context to params.
func (w *ServerInterfaceWrapper) PostInvitationsInvitationCodeAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invitation_code" -------------
	var invitationCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "invitation_code", runtime.ParamLocationPath, ctx.Param("invitation_code"), &invitationCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitation_code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInvitationsInvitationCodeAccept(ctx, invitationCode)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Required query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, true, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// PutUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/groups", wrapper.PostGroups)
	router.POST(baseURL+"/groups/:groupId/invitation", wrapper.PostGroupsGroupIdInvitation)
	router.GET(baseURL+"/groups/:groupId/schedules", wrapper.GetGroupsGroupIdSchedules)
	router.POST(baseURL+"/groups/:groupId/schedules", wrapper.PostGroupsGroupIdSchedules)
	router.DELETE(baseURL+"/groups/:groupId/schedules/:scheduleId", wrapper.DeleteGroupsGroupIdSchedulesScheduleId)
	router.GET(baseURL+"/groups/:groupId/schedules/:scheduleId", wrapper.GetGroupsGroupIdSchedulesScheduleId)
	router.PUT(baseURL+"/groups/:groupId/schedules/:scheduleId", wrapper.PutGroupsGroupIdSchedulesScheduleId)
	router.GET(baseURL+"/invitations/:invitation_code", wrapper.GetInvitationsInvitationCode)
	router.POST(baseURL+"/invitations/:invitation_code/accept", wrapper.PostInvitationsInvitationCodeAccept)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.PUT(baseURL+"/users/:userId", wrapper.PutUsersUserId)

}
